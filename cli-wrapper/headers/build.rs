fn main() {
    let crate_dir = std::env::var("CARGO_MANIFEST_DIR").unwrap();

    let out_file = std::env::var_os("CBINDGEN_OUTFILE").expect("Must define CBINDGEN_OUTFILE");
    println!("Writing C headers to $CBINDGEN_OUTFILE = {:?}", out_file);

    cbindgen::Builder::new()
        .with_crate(crate_dir)
        .with_language(cbindgen::Language::C)
        .with_pragma_once(true)
        .with_autogen_warning(
            "/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */",
        )
        .with_after_include(
            "
#include <stdint.h>  // for uint32_t
#include <stdbool.h> // for bool

#define LD_PRELOAD_VAR \"LD_PRELOAD\"
#define PROBE_DIR_VAR \"PROBE_DIR\"
#define PROBE_COPY_FILES_VAR \"PROBE_COPY_FILES\"
#define PIDS_SUBDIR \"pids\"
#define CONTEXT_SUBDIR \"context\"
#define INODES_SUBDIR \"inodes\"
#define PROCESS_TREE_CONTEXT_FILE \"process_tree_context\"
#define DATA_SUBDIR \"data\"
#define OPS_SUBDIR \"ops\"
",
        )
        .with_no_includes()
        .with_tab_width(4)
        .with_style(cbindgen::Style::Tag)
        .include_item("FixedPath")
        .include_item("ProcessTreeContext")
        .include_item("CopyFilesMode")
        .include_item("ProcessContext")
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file(out_file);
}
