/*
 * Run me with:
 *
 *     sudo env - BPFTRACE_STRLEN=200 result/bin/bpftrace prov.bt $pid
 *
 * where $pid is the process you want to trace.
 */

///////////////////////////////////////////////////////////////////////////////
// Initialize
///////////////////////////////////////////////////////////////////////////////

BEGIN {
  @pids[$1] = 1;
  @main_pid[$1] = 1;
  printf("%d %d %d launch_pid %d\n", pid, tid, nsecs, $1);
}

///////////////////////////////////////////////////////////////////////////////
// Enter exit syscalls
///////////////////////////////////////////////////////////////////////////////

tracepoint:syscalls:sys_enter_exit {
  $task = (struct task_struct *)curtask;
  if (@pids[$task->real_parent->pid]) {
    @pids[pid] = 1;
  }
  if (@pids[pid]) {
    printf("%d %d %d exit %d\n", pid, tid, nsecs, args.error_code);
    if (pid == tid) {
      @pids[pid] = 0;
      if (@main_pid[pid]) {
        exit();
      }
    }
  }
}
tracepoint:syscalls:sys_enter_exit_group {
  $task = (struct task_struct *)curtask;
  if (@pids[$task->real_parent->pid]) {
    @pids[pid] = 1;
  }
  if (@pids[pid]) {
    printf("%d %d %d exit %d\n", pid, tid, nsecs, args.error_code);
    @pids[pid] = 0;
    if (@main_pid[pid]) {
      exit();
    }
  }
}

///////////////////////////////////////////////////////////////////////////////
// Enter other syscalls + forky syscalls
///////////////////////////////////////////////////////////////////////////////

tracepoint:syscalls:sys_enter_open {
  $task = (struct task_struct *)curtask;
  if (@pids[$task->real_parent->pid]) {
    @pids[pid] = 1;
  }
  if (@pids[pid]) {
    printf("%d %d %d open %s %d %d\n", pid, tid, nsecs, str(args.filename), args.flags, args.mode);
  }
}
tracepoint:syscalls:sys_enter_openat {
  $task = (struct task_struct *)curtask;
  if (@pids[$task->real_parent->pid]) {
    @pids[pid] = 1;
  }
  if (@pids[pid]) {
    printf("%d %d %d openat %d %s %d %d\n", pid, tid, nsecs, args.dfd, str(args.filename), args.flags, args.mode);
  }
}
tracepoint:syscalls:sys_enter_execve {
  $task = (struct task_struct *)curtask;
  if (@pids[$task->real_parent->pid]) {
    @pids[pid] = 1;
  }
  if (@pids[pid]) {
    //printf("%d %d %d execve %s [%s] [%s]\n", pid, tid, nsecs, str(args.filename), join(args.argv, ","), join(args.envp, ","));
   printf("%d %d %d execve %s\n", pid, tid, nsecs, str(args.filename));
  }
}
tracepoint:syscalls:sys_enter_newfstatat {
  $task = (struct task_struct *)curtask;
  if (@pids[$task->real_parent->pid]) {
    @pids[pid] = 1;
  }
  if (@pids[pid]) {
    printf("%d %d %d fork\n", pid, tid, nsecs);
  }
}
tracepoint:syscalls:sys_enter_fork {
  $task = (struct task_struct *)curtask;
  if (@pids[$task->real_parent->pid]) {
    @pids[pid] = 1;
  }
  if (@pids[pid]) {
    printf("%d %d %d fork\n", pid, tid, nsecs);
  }
}
tracepoint:syscalls:sys_enter_clone {
  $task = (struct task_struct *)curtask;
  if (@pids[$task->real_parent->pid]) {
    @pids[pid] = 1;
  }
  if (@pids[pid]) {
    printf("%d %d %d clone %d %d\n", pid, tid, nsecs, args.clone_flags, args.newsp);
  }
}

///////////////////////////////////////////////////////////////////////////////
// Exit other syscalls
///////////////////////////////////////////////////////////////////////////////

tracepoint:syscalls:sys_exit_open,
tracepoint:syscalls:sys_exit_openat,
tracepoint:syscalls:sys_exit_execve,
tracepoint:syscalls:sys_exit_fork,
tracepoint:syscalls:sys_exit_clone
{
  $task = (struct task_struct *)curtask;
  if (@pids[$task->real_parent->pid]) {
    @pids[pid] = 1;
  }
  if (@pids[pid]) {
    printf("%d %d %d ret %d\n", pid, tid, nsecs, args.ret);
  }
}
