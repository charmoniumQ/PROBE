import typing

_Node = typing.TypeVar("_Node", bound=typing.Hashable)
_dict: typing.TypeAlias = dict[str, typing.Any]

class DiGraph(typing.Generic[_Node]):
    def add_node(self, node: _Node, **kwargs: typing.Any) -> None: ...
    def add_nodes_from(self, nodes: typing.Iterable[_Node], **kwargs: typing.Any) -> None: ...
    def add_edge(self, src: _Node, dst: _Node, **kwargs: typing.Any) -> None: ...
    def add_edges_from(self, edges: typing.Iterable[tuple[_Node, _Node]], **kwargs: typing.Any) -> None: ...
    def successors(self, node: _Node) -> typing.Iterable[_Node]: ...
    def predecessors(self, node: _Node) -> typing.Iterable[_Node]: ...
    def in_degree(self, node: _Node) -> int: ...
    def out_degree(self, node: _Node) -> int: ...
    def remove_node(self, node: _Node) -> None: ...
    def reverse(self) -> DiGraph[_Node]: ...
    def has_node(self, node: _Node) -> bool: ...
    def get_edge_data(self, src: _Node, dst: _Node) -> typing.Mapping[str, typing.Any]: ...

    @typing.overload
    def nodes(self) -> typing.Iterable[_Node]: ...

    @typing.overload
    def nodes(self, data: typing.Literal[False]) -> typing.Iterable[_Node]: ...

    @typing.overload
    def nodes(self, data: typing.Literal[True]) -> typing.Iterable[tuple[_Node, _dict]]: ...

    @typing.overload
    def edges(self) -> typing.Iterable[tuple[_Node, _Node]]: ...

    @typing.overload
    def edges(self, data: typing.Literal[False]) -> typing.Iterable[tuple[_Node, _Node]]: ...

    @typing.overload
    def edges(self, data: typing.Literal[True]) -> typing.Iterable[tuple[_Node, _Node, _dict]]: ...

    def __getitem__(self, node: _Node) -> _DiGraphGetItem1[_Node]: ...


class _DiGraphGetItem1(typing.Generic[_Node]):
    def __getitem__(self, node: _Node) -> _dict: ...


def bfs_layers(digraph: DiGraph[_Node], source: _Node = ...) -> typing.Iterator[list[_Node]]: ...


def dfs_edges(digraph: DiGraph[_Node], source: _Node = ...) -> typing.Iterator[tuple[_Node, _Node]]: ...


def dfs_preorder_nodes(digraph: DiGraph[_Node], source: _Node = ...) -> typing.Iterator[_Node]: ...


def dfs_postorder_nodes(digraph: DiGraph[_Node], source: _Node = ...) -> typing.Iterator[_Node]: ...


def topological_sort(digraph: DiGraph[_Node]) -> typing.Iterator[_Node]: ...


def find_cycle(digraph: DiGraph[_Node]) -> typing.Iterator[tuple[_Node, _Node]]: ...


class NetworkXNoCycle(Exception): ...


def set_node_attributes(
        digraph: DiGraph[_Node],
        values: dict[_Node, typing.Any],
        name: str,
) -> None: ...
