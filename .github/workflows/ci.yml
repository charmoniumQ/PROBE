name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    strategy:
      matrix:
        os:
          - ubuntu-24.04
          # We can test on a Matrix of Ubuntu versions
          # But Nix does get us pretty good reproducibility
          # So we will test just one in CI.
          # More full tests can be run by docker_os_matrix.py

    runs-on: ${{ matrix.os  }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Nix
      uses: cachix/install-nix-action@v27
      with:
        extra_nix_config: |
          experimental-features = nix-command flakes

    - name: Test existence of secrets
      run: |
        echo -e 'CACHIX_AUTH_TOKEN length: '
        echo ${{ secrets.CACHIX_AUTH_TOKEN }} | wc -c

    - name: Set up cachix
      uses: cachix/cachix-action@v15
      with:
        name: charmonium
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

    - name: Build Rust artifacts
      run: nix build .#cargoArtifacts

    - name: Build Rust
      run: nix build .#probe-cli

    - name: Build libprobe
      run: nix build .#libprobe

    - name: Build rest
      run: nix build .

    - name: Build and test in Nix flake
      run: nix flake check --all-systems --print-build-logs

    - name: Check benchmark on all systems
      run: nix flake check ./benchmark --all-systems --print-build-logs

    # The devshell uses slightly different build process than the Nix pkg
    # Might as well test that too
    #
    # - name: Build and test in devshell
    #   run: nix develop --command just lint compile test
    #
    # ^ That takes a long time, and it runs the same checks as nix flake check.
    # Developers should run `just lint compile test` on their machines.
    # CI and consumers will run `nix flake check`
    # However, we still want to build the devshell so the build artifacts get uploaded to Cachix.
    - name: Build devshell
      run: nix develop --command true
