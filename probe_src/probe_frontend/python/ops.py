
# This file is automatically @generated by probe_macros

import sys
import typing
from dataclasses import dataclass

mod = sys.modules[__name__]

@dataclass(init=False)
class timespec:
    tv_sec: int
    tv_nsec: int
    def __init__(self, tv_sec: int, tv_nsec: int):
        self.tv_sec = int(tv_sec)
        self.tv_nsec = int(tv_nsec)

@dataclass(init=False)
class statx_timestamp:
    tv_sec: int
    tv_nsec: int
    def __init__(self, tv_sec: int, tv_nsec: int):
        self.tv_sec = int(tv_sec)
        self.tv_nsec = int(tv_nsec)

@dataclass(init=False)
class statx:
    stx_mask: int
    stx_blksize: int
    stx_attributes: int
    stx_nlink: int
    stx_uid: int
    stx_gid: int
    stx_mode: int
    stx_ino: int
    stx_size: int
    stx_blocks: int
    stx_attributes_mask: int
    stx_atime: statx_timestamp
    stx_btime: statx_timestamp
    stx_ctime: statx_timestamp
    stx_mtime: statx_timestamp
    stx_rdev_major: int
    stx_rdev_minor: int
    stx_dev_major: int
    stx_dev_minor: int
    stx_mnt_id: int
    stx_dio_mem_align: int
    stx_dio_offset_align: int
    def __init__(self, stx_mask: int, stx_blksize: int, stx_attributes: int, stx_nlink: int, stx_uid: int, stx_gid: int, stx_mode: int, stx_ino: int, stx_size: int, stx_blocks: int, stx_attributes_mask: int, stx_atime: statx_timestamp, stx_btime: statx_timestamp, stx_ctime: statx_timestamp, stx_mtime: statx_timestamp, stx_rdev_major: int, stx_rdev_minor: int, stx_dev_major: int, stx_dev_minor: int, stx_mnt_id: int, stx_dio_mem_align: int, stx_dio_offset_align: int):
        self.stx_mask = int(stx_mask)
        self.stx_blksize = int(stx_blksize)
        self.stx_attributes = int(stx_attributes)
        self.stx_nlink = int(stx_nlink)
        self.stx_uid = int(stx_uid)
        self.stx_gid = int(stx_gid)
        self.stx_mode = int(stx_mode)
        self.stx_ino = int(stx_ino)
        self.stx_size = int(stx_size)
        self.stx_blocks = int(stx_blocks)
        self.stx_attributes_mask = int(stx_attributes_mask)
        self.stx_atime = statx_timestamp(**stx_atime)
        self.stx_btime = statx_timestamp(**stx_btime)
        self.stx_ctime = statx_timestamp(**stx_ctime)
        self.stx_mtime = statx_timestamp(**stx_mtime)
        self.stx_rdev_major = int(stx_rdev_major)
        self.stx_rdev_minor = int(stx_rdev_minor)
        self.stx_dev_major = int(stx_dev_major)
        self.stx_dev_minor = int(stx_dev_minor)
        self.stx_mnt_id = int(stx_mnt_id)
        self.stx_dio_mem_align = int(stx_dio_mem_align)
        self.stx_dio_offset_align = int(stx_dio_offset_align)

@dataclass(init=False)
class timeval:
    tv_sec: int
    tv_usec: int
    def __init__(self, tv_sec: int, tv_usec: int):
        self.tv_sec = int(tv_sec)
        self.tv_usec = int(tv_usec)

@dataclass(init=False)
class rusage:
    ru_utime: timeval
    ru_stime: timeval
    ru_maxrss: int
    ru_ixrss: int
    ru_idrss: int
    ru_isrss: int
    ru_minflt: int
    ru_majflt: int
    ru_nswap: int
    ru_inblock: int
    ru_oublock: int
    ru_msgsnd: int
    ru_msgrcv: int
    ru_nsignals: int
    ru_nvcsw: int
    ru_nivcsw: int
    def __init__(self, ru_utime: timeval, ru_stime: timeval, ru_maxrss: int, ru_ixrss: int, ru_idrss: int, ru_isrss: int, ru_minflt: int, ru_majflt: int, ru_nswap: int, ru_inblock: int, ru_oublock: int, ru_msgsnd: int, ru_msgrcv: int, ru_nsignals: int, ru_nvcsw: int, ru_nivcsw: int):
        self.ru_utime = timeval(**ru_utime)
        self.ru_stime = timeval(**ru_stime)
        self.ru_maxrss = int(ru_maxrss)
        self.ru_ixrss = int(ru_ixrss)
        self.ru_idrss = int(ru_idrss)
        self.ru_isrss = int(ru_isrss)
        self.ru_minflt = int(ru_minflt)
        self.ru_majflt = int(ru_majflt)
        self.ru_nswap = int(ru_nswap)
        self.ru_inblock = int(ru_inblock)
        self.ru_oublock = int(ru_oublock)
        self.ru_msgsnd = int(ru_msgsnd)
        self.ru_msgrcv = int(ru_msgrcv)
        self.ru_nsignals = int(ru_nsignals)
        self.ru_nvcsw = int(ru_nvcsw)
        self.ru_nivcsw = int(ru_nivcsw)

@dataclass(init=False)
class Path:
    dirfd_minus_at_fdcwd: int
    path: bytes
    device_major: int
    device_minor: int
    inode: int
    mtime: statx_timestamp
    ctime: statx_timestamp
    stat_valid: bool
    dirfd_valid: bool
    def __init__(self, dirfd_minus_at_fdcwd: int, path: bytes, device_major: int, device_minor: int, inode: int, mtime: statx_timestamp, ctime: statx_timestamp, stat_valid: bool, dirfd_valid: bool):
        self.dirfd_minus_at_fdcwd = int(dirfd_minus_at_fdcwd)
        self.path = bytes(path)
        self.device_major = int(device_major)
        self.device_minor = int(device_minor)
        self.inode = int(inode)
        self.mtime = statx_timestamp(**mtime)
        self.ctime = statx_timestamp(**ctime)
        self.stat_valid = bool(stat_valid)
        self.dirfd_valid = bool(dirfd_valid)

@dataclass(init=False)
class InitProcessOp:
    pid: int
    def __init__(self, pid: int):
        self.pid = int(pid)

@dataclass(init=False)
class InitExecEpochOp:
    epoch: int
    program_name: bytes
    def __init__(self, epoch: int, program_name: bytes):
        self.epoch = int(epoch)
        self.program_name = bytes(program_name)

@dataclass(init=False)
class InitThreadOp:
    tid: int
    def __init__(self, tid: int):
        self.tid = int(tid)

@dataclass(init=False)
class OpenOp:
    path: Path
    flags: int
    mode: int
    fd: int
    ferrno: int
    def __init__(self, path: Path, flags: int, mode: int, fd: int, ferrno: int):
        self.path = Path(**path)
        self.flags = int(flags)
        self.mode = int(mode)
        self.fd = int(fd)
        self.ferrno = int(ferrno)

@dataclass(init=False)
class CloseOp:
    low_fd: int
    high_fd: int
    ferrno: int
    def __init__(self, low_fd: int, high_fd: int, ferrno: int):
        self.low_fd = int(low_fd)
        self.high_fd = int(high_fd)
        self.ferrno = int(ferrno)

@dataclass(init=False)
class ChdirOp:
    path: Path
    ferrno: int
    def __init__(self, path: Path, ferrno: int):
        self.path = Path(**path)
        self.ferrno = int(ferrno)

@dataclass(init=False)
class ExecOp:
    path: Path
    ferrno: int
    def __init__(self, path: Path, ferrno: int):
        self.path = Path(**path)
        self.ferrno = int(ferrno)

@dataclass(init=False)
class CloneOp:
    flags: int
    run_pthread_atfork_handlers: bool
    child_process_id: int
    child_thread_id: int
    ferrno: int
    def __init__(self, flags: int, run_pthread_atfork_handlers: bool, child_process_id: int, child_thread_id: int, ferrno: int):
        self.flags = int(flags)
        self.run_pthread_atfork_handlers = bool(run_pthread_atfork_handlers)
        self.child_process_id = int(child_process_id)
        self.child_thread_id = int(child_thread_id)
        self.ferrno = int(ferrno)

@dataclass(init=False)
class ExitOp:
    status: int
    run_atexit_handlers: bool
    def __init__(self, status: int, run_atexit_handlers: bool):
        self.status = int(status)
        self.run_atexit_handlers = bool(run_atexit_handlers)

@dataclass(init=False)
class AccessOp:
    path: Path
    mode: int
    flags: int
    ferrno: int
    def __init__(self, path: Path, mode: int, flags: int, ferrno: int):
        self.path = Path(**path)
        self.mode = int(mode)
        self.flags = int(flags)
        self.ferrno = int(ferrno)

@dataclass(init=False)
class StatOp:
    path: Path
    flags: int
    statx_buf: statx
    ferrno: int
    def __init__(self, path: Path, flags: int, statx_buf: statx, ferrno: int):
        self.path = Path(**path)
        self.flags = int(flags)
        self.statx_buf = statx(**statx_buf)
        self.ferrno = int(ferrno)

@dataclass(init=False)
class ReaddirOp:
    dir: Path
    child: bytes
    all_children: bool
    ferrno: int
    def __init__(self, dir: Path, child: bytes, all_children: bool, ferrno: int):
        self.dir = Path(**dir)
        self.child = bytes(child)
        self.all_children = bool(all_children)
        self.ferrno = int(ferrno)

@dataclass(init=False)
class WaitOp:
    pid: int
    options: int
    status: int
    ret: int
    ferrno: int
    def __init__(self, pid: int, options: int, status: int, ret: int, ferrno: int):
        self.pid = int(pid)
        self.options = int(options)
        self.status = int(status)
        self.ret = int(ret)
        self.ferrno = int(ferrno)

@dataclass(init=False)
class GetRUsageOp:
    waitpid_arg: int
    getrusage_arg: int
    usage: rusage
    ferrno: int
    def __init__(self, waitpid_arg: int, getrusage_arg: int, usage: rusage, ferrno: int):
        self.waitpid_arg = int(waitpid_arg)
        self.getrusage_arg = int(getrusage_arg)
        self.usage = rusage(**usage)
        self.ferrno = int(ferrno)

@dataclass(init=False)
class ReadLinkOp:
    path: Path
    resolved: bytes
    ferrno: int
    def __init__(self, path: Path, resolved: bytes, ferrno: int):
        self.path = Path(**path)
        self.resolved = bytes(resolved)
        self.ferrno = int(ferrno)

@dataclass(init=False)
class Metadata:
    @dataclass(init=False)
    class Mode:
        mode: int
        def __init__(self, mode: int):
            self.mode = int(mode)

    @dataclass(init=False)
    class Ownership:
        uid: int
        gid: int
        def __init__(self, uid: int, gid: int):
            self.uid = int(uid)
            self.gid = int(gid)

    @dataclass(init=False)
    class Times:
        is_null: bool
        atime: timeval
        mtime: timeval
        def __init__(self, is_null: bool, atime: timeval, mtime: timeval):
            self.is_null = bool(is_null)
            self.atime = timeval(**atime)
            self.mtime = timeval(**mtime)

    value: typing.Union[Mode, Ownership, Times]
    def __init__(self, **kwargs: typing.Mapping[str, typing.Any]):
        if len(kwargs) != 1:
            raise ValueError("Malformed Enum constructor args")
        key = list(kwargs.keys())[0]
        if key in self.__class__.__dict__:
            self.value = self.__class__.__dict__[key](**kwargs[key])
        else:
            self.value = mod.__dict__[key](**kwargs[key])

@dataclass(init=False)
class UpdateMetadataOp:
    path: Path
    flags: int
    metadata: Metadata
    ferrno: int
    def __init__(self, path: Path, flags: int, metadata: Metadata, ferrno: int):
        self.path = Path(**path)
        self.flags = int(flags)
        self.metadata = Metadata(**metadata)
        self.ferrno = int(ferrno)

@dataclass(init=False)
class OpInternal:
    value: typing.Union[InitProcessOp, InitExecEpochOp, InitThreadOp, OpenOp, CloseOp, ChdirOp, ExecOp, CloneOp, ExitOp, AccessOp, StatOp, ReaddirOp, WaitOp, GetRUsageOp, UpdateMetadataOp, ReadLinkOp]
    def __init__(self, **kwargs: typing.Mapping[str, typing.Any]):
        if len(kwargs) != 1:
            raise ValueError("Malformed Enum constructor args")
        key = list(kwargs.keys())[0]
        if key in self.__class__.__dict__:
            self.value = self.__class__.__dict__[key](**kwargs[key])
        else:
            self.value = mod.__dict__[key](**kwargs[key])

@dataclass(init=False)
class Op:
    data: OpInternal
    time: timespec
    def __init__(self, data: OpInternal, time: timespec):
        self.data = OpInternal(**data)
        self.time = timespec(**time)

